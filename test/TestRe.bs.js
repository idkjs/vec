// Generated by Melange
'use strict';

var Int = require("bs-platform/lib/js/int.js");
var Vec = require("../src/vec.bs.js");
var List = require("bs-platform/lib/js/list.js");
var Stdlib = require("bs-platform/lib/js/stdlib.js");

function make(param) {
  var v = Vec.make(undefined, undefined, undefined);
  console.log(0 === Vec.length(v));
  console.log(Vec.default_growth_rate === Vec.growth_rate(v));
  var v$1 = Vec.make(3, undefined, undefined);
  console.log(3 === Vec.growth_rate(v$1));
  
}

make(undefined);

function assert_string(a, b) {
  console.log(a, b);
  
}

function assert_bool(a, b) {
  console.log(a, b);
  
}

function assert_list(a, b) {
  console.log(a, b);
  
}

function assert_unit(param, a) {
  console.log("assert_unit", a);
  
}

function assert_option(a, b) {
  console.log(a, b);
  
}

function assert_array(a, b) {
  console.log(a, b);
  
}

function assert_int_bool(a, b) {
  console.log(a, b);
  
}

function make$1(param) {
  var v = Vec.make(undefined, undefined, undefined);
  var b = Vec.length(v);
  console.log(0, b);
  var b$1 = Vec.growth_rate(v) | 0;
  console.log(Vec.default_growth_rate, b$1);
  var v$1 = Vec.make(3, undefined, undefined);
  var partial_arg = 3 === Vec.growth_rate(v$1);
  return function (param) {
    console.log(partial_arg, param);
    
  };
}

function capacity(param) {
  var v = Vec.make(undefined, undefined, undefined);
  Vec.ensure_capacity(20, v);
  var b = Vec.capacity(v) >= 20;
  console.log("ensure_capacity", b);
  Vec.reserve(30, v);
  var b$1 = Vec.capacity(v) >= 50;
  console.log("reserve", b$1);
  Vec.push(2, v);
  Vec.shrink_to_fit(v);
  var b$2 = Vec.capacity(v);
  console.log(1, b$2);
  
}

function get_set(param) {
  var v = Vec.make(undefined, 8, undefined);
  var b = Vec.get(v, 0);
  console.log(undefined, b);
  var b$1 = Vec.set(v, 0, 0);
  console.log(false, b$1);
  Vec.push(1, v);
  var b$2 = Vec.get_exn(v, 0);
  console.log(2, b$2);
  var b$3 = Vec.set(v, 0, 3);
  console.log(true, b$3);
  var b$4 = Vec.get(v, 0);
  console.log(3, b$4);
  
}

function push_pop(param) {
  var v = Vec.make(undefined, undefined, undefined);
  Vec.push(1, v);
  var b = Vec.length(v);
  console.log(1, b);
  Vec.push(3, v);
  var b$1 = Vec.length(v);
  console.log(2, b$1);
  var b$2 = Vec.pop(v);
  console.log(3, b$2);
  var b$3 = Vec.pop(v);
  console.log(1, b$3);
  var b$4 = Vec.pop(v);
  console.log(undefined, b$4);
  
}

function map(param) {
  var v = Vec.iota(0, 4);
  var v$p = Vec.map((function (prim) {
          return prim + 1 | 0;
        }), v);
  var b = Vec.to_list(v$p);
  console.log({
        hd: 1,
        tl: {
          hd: 2,
          tl: {
            hd: 3,
            tl: {
              hd: 4,
              tl: {
                hd: 5,
                tl: /* [] */0
              }
            }
          }
        }
      }, b);
  Vec.map_in_place((function (prim) {
          return prim + 1 | 0;
        }), v$p);
  var b$1 = Vec.to_list(v$p);
  console.log({
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: {
              hd: 5,
              tl: {
                hd: 6,
                tl: /* [] */0
              }
            }
          }
        }
      }, b$1);
  var v$p$p = Vec.mapi((function (i, param) {
          return i;
        }), v$p);
  var b$2 = Vec.to_list(v$p$p);
  console.log({
        hd: 0,
        tl: {
          hd: 1,
          tl: {
            hd: 2,
            tl: {
              hd: 3,
              tl: {
                hd: 4,
                tl: /* [] */0
              }
            }
          }
        }
      }, b$2);
  
}

function iter(param) {
  var v = Vec.iota(0, 5);
  var expected = List.fold_left((function (prim0, prim1) {
          return prim0 + prim1 | 0;
        }), 0, {
        hd: 0,
        tl: {
          hd: 1,
          tl: {
            hd: 2,
            tl: {
              hd: 3,
              tl: {
                hd: 4,
                tl: {
                  hd: 5,
                  tl: /* [] */0
                }
              }
            }
          }
        }
      });
  var actual = {
    contents: 0
  };
  Vec.iter((function (i) {
          actual.contents = actual.contents + i | 0;
          
        }), v);
  console.log(expected, actual.contents);
  var actual$1 = {
    contents: true
  };
  Vec.iteri((function (i, a) {
          actual$1.contents = actual$1.contents && i === a;
          
        }), v);
  console.log("iteri", actual$1.contents);
  
}

function cartesian_product(param) {
  var a = Vec.of_list({
        hd: 1,
        tl: {
          hd: 2,
          tl: {
            hd: 3,
            tl: /* [] */0
          }
        }
      });
  var b = Vec.of_list({
        hd: 10,
        tl: {
          hd: 20,
          tl: {
            hd: 30,
            tl: /* [] */0
          }
        }
      });
  var b$1 = Vec.to_list(Vec.cartesian_product(a, b));
  console.log({
        hd: [
          1,
          10
        ],
        tl: {
          hd: [
            1,
            20
          ],
          tl: {
            hd: [
              1,
              30
            ],
            tl: {
              hd: [
                2,
                10
              ],
              tl: {
                hd: [
                  2,
                  20
                ],
                tl: {
                  hd: [
                    2,
                    30
                  ],
                  tl: {
                    hd: [
                      3,
                      10
                    ],
                    tl: {
                      hd: [
                        3,
                        20
                      ],
                      tl: {
                        hd: [
                          3,
                          30
                        ],
                        tl: /* [] */0
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }, b$1);
  
}

function monad_ops(param) {
  var list = {
    hd: {
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    },
    tl: {
      hd: {
        hd: 4,
        tl: {
          hd: 5,
          tl: {
            hd: 6,
            tl: /* [] */0
          }
        }
      },
      tl: {
        hd: {
          hd: 7,
          tl: {
            hd: 8,
            tl: {
              hd: 9,
              tl: /* [] */0
            }
          }
        },
        tl: /* [] */0
      }
    }
  };
  var a = Vec.map(Vec.of_list, Vec.of_list(list));
  var b = Vec.to_list(Vec.flatten(a));
  var a$1 = List.flatten(list);
  console.log(a$1, b);
  var f = function (i) {
    return Vec.of_list({
                hd: i,
                tl: {
                  hd: i,
                  tl: {
                    hd: i,
                    tl: /* [] */0
                  }
                }
              });
  };
  var a$2 = Vec.iota(1, 4);
  var b$1 = Vec.to_list(Vec.flat_map(f, a$2));
  console.log({
        hd: 1,
        tl: {
          hd: 1,
          tl: {
            hd: 1,
            tl: {
              hd: 2,
              tl: {
                hd: 2,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 3,
                    tl: {
                      hd: 3,
                      tl: {
                        hd: 3,
                        tl: {
                          hd: 4,
                          tl: {
                            hd: 4,
                            tl: {
                              hd: 4,
                              tl: /* [] */0
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }, b$1);
  
}

function filter(param) {
  var v = Vec.iota(0, 10);
  var even = function (i) {
    return i % 2 === 0;
  };
  var b = Vec.to_list(Vec.filter(even, v));
  console.log({
        hd: 0,
        tl: {
          hd: 2,
          tl: {
            hd: 4,
            tl: {
              hd: 6,
              tl: {
                hd: 8,
                tl: {
                  hd: 10,
                  tl: /* [] */0
                }
              }
            }
          }
        }
      }, b);
  var b$1 = Vec.length(Vec.filteri((function (prim0, prim1) {
              return prim0 === prim1;
            }), v));
  var a = Vec.length(v);
  console.log(a, b$1);
  Vec.filter_in_place(even, v);
  var b$2 = Vec.length(v);
  console.log(6, b$2);
  
}

function conversions(param) {
  var l = {
    hd: 1,
    tl: {
      hd: 2,
      tl: {
        hd: 3,
        tl: {
          hd: 4,
          tl: {
            hd: 5,
            tl: /* [] */0
          }
        }
      }
    }
  };
  var v = Vec.of_list(l);
  var b = Vec.to_list(v);
  console.log(l, b);
  Vec.reserve(100, v);
  var a = Vec.to_array(v);
  console.log([
        1,
        2,
        3,
        4,
        5
      ], a);
  console.log(5, a.length);
  
}

function rev(param) {
  var l = {
    hd: 1,
    tl: {
      hd: 2,
      tl: {
        hd: 3,
        tl: {
          hd: 4,
          tl: {
            hd: 5,
            tl: {
              hd: 6,
              tl: /* [] */0
            }
          }
        }
      }
    }
  };
  var v = Vec.of_list(l);
  var b = Vec.to_list(Vec.rev(v));
  var a = List.rev(l);
  console.log(a, b);
  Vec.rev_in_place(v);
  var b$1 = Vec.to_list(v);
  var a$1 = List.rev(l);
  console.log(a$1, b$1);
  
}

function append(param) {
  var l1 = {
    hd: 1,
    tl: {
      hd: 2,
      tl: {
        hd: 3,
        tl: {
          hd: 4,
          tl: {
            hd: 5,
            tl: /* [] */0
          }
        }
      }
    }
  };
  var l2 = {
    hd: 6,
    tl: {
      hd: 7,
      tl: {
        hd: 8,
        tl: {
          hd: 9,
          tl: {
            hd: 10,
            tl: /* [] */0
          }
        }
      }
    }
  };
  var v = Vec.of_list(l1);
  var v2 = Vec.of_list(l2);
  Vec.append(v, v2);
  var b = Vec.to_list(v);
  var a = Stdlib.$at(l1, l2);
  console.log(a, b);
  var b$1 = Vec.length(v);
  console.log(10, b$1);
  
}

function exists(param) {
  var v = Vec.of_list({
        hd: 1,
        tl: {
          hd: 2,
          tl: {
            hd: 3,
            tl: {
              hd: 4,
              tl: {
                hd: 5,
                tl: /* [] */0
              }
            }
          }
        }
      });
  var b = Vec.exists((function (param) {
          return 4 === param;
        }), v);
  console.log("exists", b);
  var b$1 = !Vec.exists((function (param) {
          return 6 === param;
        }), v);
  console.log("not exists", b$1);
  var b$2 = !Vec.exists((function (param) {
          return true;
        }), Vec.make(undefined, undefined, undefined));
  console.log("exists empty", b$2);
  
}

function for_all(param) {
  var v = Vec.iota(5, 1);
  var b = Vec.for_all((function (param) {
          return 1 <= param;
        }), v);
  console.log("for_all", b);
  var b$1 = !Vec.for_all((function (param) {
          return 3 <= param;
        }), v);
  console.log("not for_all", b$1);
  var b$2 = Vec.for_all((function (param) {
          return false;
        }), Vec.make(undefined, undefined, undefined));
  console.log("for_all empty", b$2);
  
}

function mem(param) {
  var v = Vec.iota(1, 100);
  var b = Vec.mem(95)(v);
  console.log("mem", b);
  var b$1 = !Vec.mem(101)(v);
  console.log("mem not", b$1);
  var a = [
    1,
    2
  ];
  var b$2 = [
    1,
    2
  ];
  var v$1 = Vec.of_list({
        hd: [
          1,
          2
        ],
        tl: {
          hd: a,
          tl: {
            hd: [
              1,
              2
            ],
            tl: /* [] */0
          }
        }
      });
  var b$3 = Vec.memq(a)(v$1);
  console.log("memq", b$3);
  var b$4 = !Vec.memq(b$2)(v$1);
  console.log("memq", b$4);
  
}

function folds(param) {
  var v = Vec.iota(1, 100);
  var l = Vec.to_list(v);
  var expected = List.fold_left((function (prim0, prim1) {
          return prim0 + prim1 | 0;
        }), 0, l);
  var actual = Vec.fold_left((function (prim0, prim1) {
          return prim0 + prim1 | 0;
        }), 0, v);
  console.log(expected, actual);
  var expected$1 = List.fold_right((function (prim0, prim1) {
          return Math.imul(prim0, prim1);
        }), l, 1);
  var actual$1 = Vec.fold_right((function (prim0, prim1) {
          return Math.imul(prim0, prim1);
        }), v, 1);
  console.log(expected$1, actual$1);
  var empty = Vec.make(undefined, undefined, undefined);
  var b = Vec.fold_left((function (prim0, prim1) {
          return prim0 + prim1 | 0;
        }), -50, empty);
  console.log(-50, b);
  var b$1 = Vec.fold_right((function (prim0, prim1) {
          return prim0 + prim1 | 0;
        }), empty, -50);
  console.log(-50, b$1);
  
}

function zip(param) {
  var a = Vec.iota(1, 3);
  var b = Vec.iota(4, 6);
  var b$1 = Vec.to_list(Vec.zip(a, b));
  console.log({
        hd: [
          1,
          4
        ],
        tl: {
          hd: [
            2,
            5
          ],
          tl: {
            hd: [
              3,
              6
            ],
            tl: /* [] */0
          }
        }
      }, b$1);
  var b$2 = Vec.to_list(Vec.zip_with((function (prim0, prim1) {
              return prim0 + prim1 | 0;
            }), a, b));
  console.log({
        hd: 5,
        tl: {
          hd: 7,
          tl: {
            hd: 9,
            tl: /* [] */0
          }
        }
      }, b$2);
  
}

function equal(param) {
  var b = Vec.equal(Vec.make(undefined, undefined, undefined), Vec.make(undefined, undefined, undefined));
  console.log("equal empty", b);
  var a = Vec.of_list({
        hd: 1,
        tl: {
          hd: 2,
          tl: {
            hd: 3,
            tl: {
              hd: 4,
              tl: {
                hd: 5,
                tl: /* [] */0
              }
            }
          }
        }
      });
  var b$1 = Vec.iota(1, 5);
  var b$2 = Vec.equal(a, b$1);
  console.log("equal non-empty", b$2);
  Vec.reserve(10, a);
  var b$3 = Vec.equal(a, b$1);
  console.log("equal diff capacity", b$3);
  Vec.push(6, a);
  var b$4 = !Vec.equal(a, b$1);
  console.log("equal diff length", b$4);
  
}

function compare(param) {
  var b = Vec.compare(Vec.make(undefined, undefined, undefined), Vec.make(undefined, undefined, undefined));
  console.log(0, b);
  var a = Vec.of_list({
        hd: /* 'a' */97,
        tl: {
          hd: /* 'b' */98,
          tl: {
            hd: /* 'c' */99,
            tl: /* [] */0
          }
        }
      });
  var b$1 = Vec.of_list({
        hd: /* 'a' */97,
        tl: {
          hd: /* 'b' */98,
          tl: {
            hd: /* 'd' */100,
            tl: /* [] */0
          }
        }
      });
  var b$2 = Vec.compare(a, a);
  console.log(0, b$2);
  var b$3 = Vec.compare(a, b$1);
  console.log(-1, b$3);
  var b$4 = Vec.compare(b$1, a);
  console.log(1, b$4);
  var a$1 = Vec.of_list({
        hd: /* 'a' */97,
        tl: {
          hd: /* 'b' */98,
          tl: {
            hd: /* 'c' */99,
            tl: /* [] */0
          }
        }
      });
  var b$5 = Vec.of_list({
        hd: /* 'a' */97,
        tl: {
          hd: /* 'b' */98,
          tl: {
            hd: /* 'c' */99,
            tl: {
              hd: /* 'd' */100,
              tl: {
                hd: /* 'e' */101,
                tl: /* [] */0
              }
            }
          }
        }
      });
  var b$6 = Vec.compare(a$1, b$5);
  console.log(-1, b$6);
  var a$2 = Vec.of_list({
        hd: /* 'a' */97,
        tl: {
          hd: /* 'b' */98,
          tl: {
            hd: /* 'c' */99,
            tl: {
              hd: /* 'd' */100,
              tl: /* [] */0
            }
          }
        }
      });
  var b$7 = Vec.of_list({
        hd: /* 'e' */101,
        tl: {
          hd: /* 'f' */102,
          tl: /* [] */0
        }
      });
  var b$8 = Vec.compare(a$2, b$7);
  console.log(-1, b$8);
  
}

function assert_(a, b) {
  var partial_arg = a === b;
  return function (param) {
    console.log(partial_arg, param);
    
  };
}

function pretty_print2(param) {
  var param$1 = Vec.make(undefined, undefined, undefined);
  assert_("[]", Vec.pretty_print(Int.to_string, param$1))(undefined);
  var param$2 = Vec.singleton(2);
  assert_("[2]", Vec.pretty_print(Int.to_string, param$2))(undefined);
  var param$3 = Vec.iota(1, 5);
  assert_("[1; 2; 3; 4; 5]", Vec.pretty_print(Int.to_string, param$3))(undefined);
  var param$4 = Vec.of_list({
        hd: "abc",
        tl: {
          hd: "def",
          tl: /* [] */0
        }
      });
  assert_("[abc; def]", Vec.pretty_print((function (s) {
                return s;
              }), param$4))(undefined);
  var pp = function (param) {
    return Vec.pretty_print((function (s) {
                  return Int.to_string(s.length);
                }), param);
  };
  return assert_("[3; 4; 5]", pp(Vec.of_list({
                      hd: "aaa",
                      tl: {
                        hd: "abcd",
                        tl: {
                          hd: "abcde",
                          tl: /* [] */0
                        }
                      }
                    })));
}

function pretty_print(param) {
  console.log("pretty_print");
  var param$1 = Vec.make(undefined, undefined, undefined);
  console.log("[]" === Vec.pretty_print(Int.to_string, param$1));
  var param$2 = Vec.singleton(2);
  console.log("[2]" === Vec.pretty_print(Int.to_string, param$2));
  var param$3 = Vec.iota(1, 5);
  console.log("[1; 2; 3; 4; 5]" === Vec.pretty_print(Int.to_string, param$3));
  var param$4 = Vec.of_list({
        hd: "abc",
        tl: {
          hd: "def",
          tl: /* [] */0
        }
      });
  console.log("[abc; def]" === Vec.pretty_print((function (s) {
              return s;
            }), param$4));
  var pp = function (param) {
    return Vec.pretty_print((function (s) {
                  return Int.to_string(s.length);
                }), param);
  };
  console.log("[3; 4; 5]" === pp(Vec.of_list({
                hd: "aaa",
                tl: {
                  hd: "abcd",
                  tl: {
                    hd: "abcde",
                    tl: /* [] */0
                  }
                }
              })));
  
}

var test_suite_1 = {
  hd: (console.log("make", make$1(undefined)), undefined),
  tl: {
    hd: (console.log("capacity", capacity(undefined)), undefined),
    tl: {
      hd: (console.log("get_set", get_set(undefined)), undefined),
      tl: {
        hd: (console.log("push_pop", push_pop(undefined)), undefined),
        tl: {
          hd: (console.log("map", map(undefined)), undefined),
          tl: {
            hd: (console.log("iter", iter(undefined)), undefined),
            tl: {
              hd: (console.log("cartesian_product", cartesian_product(undefined)), undefined),
              tl: {
                hd: (console.log("monad_ops", monad_ops(undefined)), undefined),
                tl: {
                  hd: (console.log("filter", filter(undefined)), undefined),
                  tl: {
                    hd: (console.log("conversions", conversions(undefined)), undefined),
                    tl: {
                      hd: (console.log("rev", rev(undefined)), undefined),
                      tl: {
                        hd: (console.log("append", append(undefined)), undefined),
                        tl: {
                          hd: (console.log("exists", exists(undefined)), undefined),
                          tl: {
                            hd: (console.log("for_all", for_all(undefined)), undefined),
                            tl: {
                              hd: (console.log("mem", mem(undefined)), undefined),
                              tl: {
                                hd: (console.log("folds", folds(undefined)), undefined),
                                tl: {
                                  hd: (console.log("zip", zip(undefined)), undefined),
                                  tl: {
                                    hd: (console.log("equal", equal(undefined)), undefined),
                                    tl: {
                                      hd: (console.log("compare", compare(undefined)), undefined),
                                      tl: {
                                        hd: (console.log("pretty_print", pretty_print(undefined)), undefined),
                                        tl: {
                                          hd: (console.log("pretty_print2", pretty_print2(undefined)), undefined),
                                          tl: /* [] */0
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};

var test_suite = [
  "Tests",
  test_suite_1
];

exports.assert_string = assert_string;
exports.assert_bool = assert_bool;
exports.assert_list = assert_list;
exports.assert_unit = assert_unit;
exports.assert_option = assert_option;
exports.assert_array = assert_array;
exports.assert_int_bool = assert_int_bool;
exports.make = make$1;
exports.capacity = capacity;
exports.get_set = get_set;
exports.push_pop = push_pop;
exports.map = map;
exports.iter = iter;
exports.cartesian_product = cartesian_product;
exports.monad_ops = monad_ops;
exports.filter = filter;
exports.conversions = conversions;
exports.rev = rev;
exports.append = append;
exports.exists = exists;
exports.for_all = for_all;
exports.mem = mem;
exports.folds = folds;
exports.zip = zip;
exports.equal = equal;
exports.compare = compare;
exports.assert_ = assert_;
exports.pretty_print2 = pretty_print2;
exports.pretty_print = pretty_print;
exports.test_suite = test_suite;
/*  Not a pure module */
